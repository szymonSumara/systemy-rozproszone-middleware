# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.7
#
# <auto-generated>
#
# Generated from file `smarthome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHome
_M_SmartHome = Ice.openModule('SmartHome')
__name__ = 'SmartHome'

if 'DevicesTypes' not in _M_SmartHome.__dict__:
    _M_SmartHome.DevicesTypes = Ice.createTempClass()
    class DevicesTypes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    DevicesTypes.BULBULATOR = DevicesTypes("BULBULATOR", 0)
    DevicesTypes.KETTLE = DevicesTypes("KETTLE", 1)
    DevicesTypes.STOVE = DevicesTypes("STOVE", 2)
    DevicesTypes.COOKER = DevicesTypes("COOKER", 3)
    DevicesTypes._enumerators = { 0:DevicesTypes.BULBULATOR, 1:DevicesTypes.KETTLE, 2:DevicesTypes.STOVE, 3:DevicesTypes.COOKER }

    _M_SmartHome._t_DevicesTypes = IcePy.defineEnum('::SmartHome::DevicesTypes', DevicesTypes, (), DevicesTypes._enumerators)

    _M_SmartHome.DevicesTypes = DevicesTypes
    del DevicesTypes

if 'KettleTypes' not in _M_SmartHome.__dict__:
    _M_SmartHome.KettleTypes = Ice.createTempClass()
    class KettleTypes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    KettleTypes.SMALLKETTLE = KettleTypes("SMALLKETTLE", 0)
    KettleTypes.NORMALKETTLE = KettleTypes("NORMALKETTLE", 1)
    KettleTypes.BIGKETTLE = KettleTypes("BIGKETTLE", 2)
    KettleTypes._enumerators = { 0:KettleTypes.SMALLKETTLE, 1:KettleTypes.NORMALKETTLE, 2:KettleTypes.BIGKETTLE }

    _M_SmartHome._t_KettleTypes = IcePy.defineEnum('::SmartHome::KettleTypes', KettleTypes, (), KettleTypes._enumerators)

    _M_SmartHome.KettleTypes = KettleTypes
    del KettleTypes

if 'StoveFuel' not in _M_SmartHome.__dict__:
    _M_SmartHome.StoveFuel = Ice.createTempClass()
    class StoveFuel(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    StoveFuel.CORAL = StoveFuel("CORAL", 0)
    StoveFuel.WOOD = StoveFuel("WOOD", 1)
    StoveFuel.GAS = StoveFuel("GAS", 2)
    StoveFuel._enumerators = { 0:StoveFuel.CORAL, 1:StoveFuel.WOOD, 2:StoveFuel.GAS }

    _M_SmartHome._t_StoveFuel = IcePy.defineEnum('::SmartHome::StoveFuel', StoveFuel, (), StoveFuel._enumerators)

    _M_SmartHome.StoveFuel = StoveFuel
    del StoveFuel

if 'CookerTypes' not in _M_SmartHome.__dict__:
    _M_SmartHome.CookerTypes = Ice.createTempClass()
    class CookerTypes(Ice.EnumBase):

        def __init__(self, _n, _v):
            Ice.EnumBase.__init__(self, _n, _v)

        def valueOf(self, _n):
            if _n in self._enumerators:
                return self._enumerators[_n]
            return None
        valueOf = classmethod(valueOf)

    CookerTypes.NOOVEN2BURNERS = CookerTypes("NOOVEN2BURNERS", 0)
    CookerTypes.NOOVEN4BURNERS = CookerTypes("NOOVEN4BURNERS", 1)
    CookerTypes.NOOVEN6BURNERS = CookerTypes("NOOVEN6BURNERS", 2)
    CookerTypes.HASOVEN4BURNERS = CookerTypes("HASOVEN4BURNERS", 3)
    CookerTypes.HASOVEN6BURNERS = CookerTypes("HASOVEN6BURNERS", 4)
    CookerTypes._enumerators = { 0:CookerTypes.NOOVEN2BURNERS, 1:CookerTypes.NOOVEN4BURNERS, 2:CookerTypes.NOOVEN6BURNERS, 3:CookerTypes.HASOVEN4BURNERS, 4:CookerTypes.HASOVEN6BURNERS }

    _M_SmartHome._t_CookerTypes = IcePy.defineEnum('::SmartHome::CookerTypes', CookerTypes, (), CookerTypes._enumerators)

    _M_SmartHome.CookerTypes = CookerTypes
    del CookerTypes

if 'KettleOverflow' not in _M_SmartHome.__dict__:
    _M_SmartHome.KettleOverflow = Ice.createTempClass()
    class KettleOverflow(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::KettleOverflow'

    _M_SmartHome._t_KettleOverflow = IcePy.defineException('::SmartHome::KettleOverflow', KettleOverflow, (), False, None, ())
    KettleOverflow._ice_type = _M_SmartHome._t_KettleOverflow

    _M_SmartHome.KettleOverflow = KettleOverflow
    del KettleOverflow

if 'NotEnoughtWater' not in _M_SmartHome.__dict__:
    _M_SmartHome.NotEnoughtWater = Ice.createTempClass()
    class NotEnoughtWater(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::NotEnoughtWater'

    _M_SmartHome._t_NotEnoughtWater = IcePy.defineException('::SmartHome::NotEnoughtWater', NotEnoughtWater, (), False, None, ())
    NotEnoughtWater._ice_type = _M_SmartHome._t_NotEnoughtWater

    _M_SmartHome.NotEnoughtWater = NotEnoughtWater
    del NotEnoughtWater

if 'InvalidFuelType' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidFuelType = Ice.createTempClass()
    class InvalidFuelType(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidFuelType'

    _M_SmartHome._t_InvalidFuelType = IcePy.defineException('::SmartHome::InvalidFuelType', InvalidFuelType, (), False, None, ())
    InvalidFuelType._ice_type = _M_SmartHome._t_InvalidFuelType

    _M_SmartHome.InvalidFuelType = InvalidFuelType
    del InvalidFuelType

if 'InvalidPortionSize' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidPortionSize = Ice.createTempClass()
    class InvalidPortionSize(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidPortionSize'

    _M_SmartHome._t_InvalidPortionSize = IcePy.defineException('::SmartHome::InvalidPortionSize', InvalidPortionSize, (), False, None, ())
    InvalidPortionSize._ice_type = _M_SmartHome._t_InvalidPortionSize

    _M_SmartHome.InvalidPortionSize = InvalidPortionSize
    del InvalidPortionSize

if 'InvalidBurnerNumber' not in _M_SmartHome.__dict__:
    _M_SmartHome.InvalidBurnerNumber = Ice.createTempClass()
    class InvalidBurnerNumber(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::InvalidBurnerNumber'

    _M_SmartHome._t_InvalidBurnerNumber = IcePy.defineException('::SmartHome::InvalidBurnerNumber', InvalidBurnerNumber, (), False, None, ())
    InvalidBurnerNumber._ice_type = _M_SmartHome._t_InvalidBurnerNumber

    _M_SmartHome.InvalidBurnerNumber = InvalidBurnerNumber
    del InvalidBurnerNumber

if 'BurnerOccupied' not in _M_SmartHome.__dict__:
    _M_SmartHome.BurnerOccupied = Ice.createTempClass()
    class BurnerOccupied(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::BurnerOccupied'

    _M_SmartHome._t_BurnerOccupied = IcePy.defineException('::SmartHome::BurnerOccupied', BurnerOccupied, (), False, None, ())
    BurnerOccupied._ice_type = _M_SmartHome._t_BurnerOccupied

    _M_SmartHome.BurnerOccupied = BurnerOccupied
    del BurnerOccupied

if 'CookerDontHaveOven' not in _M_SmartHome.__dict__:
    _M_SmartHome.CookerDontHaveOven = Ice.createTempClass()
    class CookerDontHaveOven(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::CookerDontHaveOven'

    _M_SmartHome._t_CookerDontHaveOven = IcePy.defineException('::SmartHome::CookerDontHaveOven', CookerDontHaveOven, (), False, None, ())
    CookerDontHaveOven._ice_type = _M_SmartHome._t_CookerDontHaveOven

    _M_SmartHome.CookerDontHaveOven = CookerDontHaveOven
    del CookerDontHaveOven

if 'OvenOccupied' not in _M_SmartHome.__dict__:
    _M_SmartHome.OvenOccupied = Ice.createTempClass()
    class OvenOccupied(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHome::OvenOccupied'

    _M_SmartHome._t_OvenOccupied = IcePy.defineException('::SmartHome::OvenOccupied', OvenOccupied, (), False, None, ())
    OvenOccupied._ice_type = _M_SmartHome._t_OvenOccupied

    _M_SmartHome.OvenOccupied = OvenOccupied
    del OvenOccupied

if 'SmartDeviceInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartDeviceInfo = Ice.createTempClass()
    class SmartDeviceInfo(object):
        def __init__(self, name='', category='', type=_M_SmartHome.DevicesTypes.BULBULATOR):
            self.name = name
            self.category = category
            self.type = type

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.category)
            _h = 5 * _h + Ice.getHash(self.type)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.SmartDeviceInfo):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.category is None or other.category is None:
                    if self.category != other.category:
                        return (-1 if self.category is None else 1)
                else:
                    if self.category < other.category:
                        return -1
                    elif self.category > other.category:
                        return 1
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartDeviceInfo)

        __repr__ = __str__

    _M_SmartHome._t_SmartDeviceInfo = IcePy.defineStruct('::SmartHome::SmartDeviceInfo', SmartDeviceInfo, (), (
        ('name', (), IcePy._t_string),
        ('category', (), IcePy._t_string),
        ('type', (), _M_SmartHome._t_DevicesTypes)
    ))

    _M_SmartHome.SmartDeviceInfo = SmartDeviceInfo
    del SmartDeviceInfo

if 'Water' not in _M_SmartHome.__dict__:
    _M_SmartHome.Water = Ice.createTempClass()
    class Water(object):
        def __init__(self, volume=0.0, temperature=0.0):
            self.volume = volume
            self.temperature = temperature

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.Water):
                return NotImplemented
            else:
                if self.volume != other.volume:
                    return False
                if self.temperature != other.temperature:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_Water)

        __repr__ = __str__

    _M_SmartHome._t_Water = IcePy.defineStruct('::SmartHome::Water', Water, (), (
        ('volume', (), IcePy._t_float),
        ('temperature', (), IcePy._t_float)
    ))

    _M_SmartHome.Water = Water
    del Water

if 'StoveFuelPortion' not in _M_SmartHome.__dict__:
    _M_SmartHome.StoveFuelPortion = Ice.createTempClass()
    class StoveFuelPortion(object):
        def __init__(self, type=_M_SmartHome.StoveFuel.CORAL, amount=0.0):
            self.type = type
            self.amount = amount

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.StoveFuelPortion):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.amount != other.amount:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_StoveFuelPortion)

        __repr__ = __str__

    _M_SmartHome._t_StoveFuelPortion = IcePy.defineStruct('::SmartHome::StoveFuelPortion', StoveFuelPortion, (), (
        ('type', (), _M_SmartHome._t_StoveFuel),
        ('amount', (), IcePy._t_float)
    ))

    _M_SmartHome.StoveFuelPortion = StoveFuelPortion
    del StoveFuelPortion

if 'KettleInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.KettleInfo = Ice.createTempClass()
    class KettleInfo(object):
        def __init__(self, type=_M_SmartHome.KettleTypes.SMALLKETTLE, capacity=0.0, minRequiredWaterLevel=0.0, water=Ice._struct_marker):
            self.type = type
            self.capacity = capacity
            self.minRequiredWaterLevel = minRequiredWaterLevel
            if water is Ice._struct_marker:
                self.water = _M_SmartHome.Water()
            else:
                self.water = water

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.KettleInfo):
                return NotImplemented
            else:
                if self.type != other.type:
                    return False
                if self.capacity != other.capacity:
                    return False
                if self.minRequiredWaterLevel != other.minRequiredWaterLevel:
                    return False
                if self.water != other.water:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_KettleInfo)

        __repr__ = __str__

    _M_SmartHome._t_KettleInfo = IcePy.defineStruct('::SmartHome::KettleInfo', KettleInfo, (), (
        ('type', (), _M_SmartHome._t_KettleTypes),
        ('capacity', (), IcePy._t_float),
        ('minRequiredWaterLevel', (), IcePy._t_float),
        ('water', (), _M_SmartHome._t_Water)
    ))

    _M_SmartHome.KettleInfo = KettleInfo
    del KettleInfo

if 'StoveInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.StoveInfo = Ice.createTempClass()
    class StoveInfo(object):
        def __init__(self, fuelType=_M_SmartHome.StoveFuel.CORAL, fuelLevel=0.0):
            self.fuelType = fuelType
            self.fuelLevel = fuelLevel

        def __eq__(self, other):
            if other is None:
                return False
            elif not isinstance(other, _M_SmartHome.StoveInfo):
                return NotImplemented
            else:
                if self.fuelType != other.fuelType:
                    return False
                if self.fuelLevel != other.fuelLevel:
                    return False
                return True

        def __ne__(self, other):
            return not self.__eq__(other)

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_StoveInfo)

        __repr__ = __str__

    _M_SmartHome._t_StoveInfo = IcePy.defineStruct('::SmartHome::StoveInfo', StoveInfo, (), (
        ('fuelType', (), _M_SmartHome._t_StoveFuel),
        ('fuelLevel', (), IcePy._t_float)
    ))

    _M_SmartHome.StoveInfo = StoveInfo
    del StoveInfo

if 'CookerInfo' not in _M_SmartHome.__dict__:
    _M_SmartHome.CookerInfo = Ice.createTempClass()
    class CookerInfo(object):
        def __init__(self, type=_M_SmartHome.CookerTypes.NOOVEN2BURNERS, burner1Avaible=False, burner2Avaible=False, burner3Avaible=False, burner4Avaible=False, burner5Avaible=False, burner6Avaible=False, ovenAvaible=False):
            self.type = type
            self.burner1Avaible = burner1Avaible
            self.burner2Avaible = burner2Avaible
            self.burner3Avaible = burner3Avaible
            self.burner4Avaible = burner4Avaible
            self.burner5Avaible = burner5Avaible
            self.burner6Avaible = burner6Avaible
            self.ovenAvaible = ovenAvaible

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.type)
            _h = 5 * _h + Ice.getHash(self.burner1Avaible)
            _h = 5 * _h + Ice.getHash(self.burner2Avaible)
            _h = 5 * _h + Ice.getHash(self.burner3Avaible)
            _h = 5 * _h + Ice.getHash(self.burner4Avaible)
            _h = 5 * _h + Ice.getHash(self.burner5Avaible)
            _h = 5 * _h + Ice.getHash(self.burner6Avaible)
            _h = 5 * _h + Ice.getHash(self.ovenAvaible)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_SmartHome.CookerInfo):
                return NotImplemented
            else:
                if self.type is None or other.type is None:
                    if self.type != other.type:
                        return (-1 if self.type is None else 1)
                else:
                    if self.type < other.type:
                        return -1
                    elif self.type > other.type:
                        return 1
                if self.burner1Avaible is None or other.burner1Avaible is None:
                    if self.burner1Avaible != other.burner1Avaible:
                        return (-1 if self.burner1Avaible is None else 1)
                else:
                    if self.burner1Avaible < other.burner1Avaible:
                        return -1
                    elif self.burner1Avaible > other.burner1Avaible:
                        return 1
                if self.burner2Avaible is None or other.burner2Avaible is None:
                    if self.burner2Avaible != other.burner2Avaible:
                        return (-1 if self.burner2Avaible is None else 1)
                else:
                    if self.burner2Avaible < other.burner2Avaible:
                        return -1
                    elif self.burner2Avaible > other.burner2Avaible:
                        return 1
                if self.burner3Avaible is None or other.burner3Avaible is None:
                    if self.burner3Avaible != other.burner3Avaible:
                        return (-1 if self.burner3Avaible is None else 1)
                else:
                    if self.burner3Avaible < other.burner3Avaible:
                        return -1
                    elif self.burner3Avaible > other.burner3Avaible:
                        return 1
                if self.burner4Avaible is None or other.burner4Avaible is None:
                    if self.burner4Avaible != other.burner4Avaible:
                        return (-1 if self.burner4Avaible is None else 1)
                else:
                    if self.burner4Avaible < other.burner4Avaible:
                        return -1
                    elif self.burner4Avaible > other.burner4Avaible:
                        return 1
                if self.burner5Avaible is None or other.burner5Avaible is None:
                    if self.burner5Avaible != other.burner5Avaible:
                        return (-1 if self.burner5Avaible is None else 1)
                else:
                    if self.burner5Avaible < other.burner5Avaible:
                        return -1
                    elif self.burner5Avaible > other.burner5Avaible:
                        return 1
                if self.burner6Avaible is None or other.burner6Avaible is None:
                    if self.burner6Avaible != other.burner6Avaible:
                        return (-1 if self.burner6Avaible is None else 1)
                else:
                    if self.burner6Avaible < other.burner6Avaible:
                        return -1
                    elif self.burner6Avaible > other.burner6Avaible:
                        return 1
                if self.ovenAvaible is None or other.ovenAvaible is None:
                    if self.ovenAvaible != other.ovenAvaible:
                        return (-1 if self.ovenAvaible is None else 1)
                else:
                    if self.ovenAvaible < other.ovenAvaible:
                        return -1
                    elif self.ovenAvaible > other.ovenAvaible:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CookerInfo)

        __repr__ = __str__

    _M_SmartHome._t_CookerInfo = IcePy.defineStruct('::SmartHome::CookerInfo', CookerInfo, (), (
        ('type', (), _M_SmartHome._t_CookerTypes),
        ('burner1Avaible', (), IcePy._t_bool),
        ('burner2Avaible', (), IcePy._t_bool),
        ('burner3Avaible', (), IcePy._t_bool),
        ('burner4Avaible', (), IcePy._t_bool),
        ('burner5Avaible', (), IcePy._t_bool),
        ('burner6Avaible', (), IcePy._t_bool),
        ('ovenAvaible', (), IcePy._t_bool)
    ))

    _M_SmartHome.CookerInfo = CookerInfo
    del CookerInfo

if '_t_Devices' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_Devices = IcePy.defineSequence('::SmartHome::Devices', (), _M_SmartHome._t_SmartDeviceInfo)

if '_t_ListOfInts' not in _M_SmartHome.__dict__:
    _M_SmartHome._t_ListOfInts = IcePy.defineSequence('::SmartHome::ListOfInts', (), IcePy._t_int)

_M_SmartHome._t_ManageSystem = IcePy.defineValue('::SmartHome::ManageSystem', Ice.Value, -1, (), False, True, None, ())

if 'ManageSystemPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.ManageSystemPrx = Ice.createTempClass()
    class ManageSystemPrx(Ice.ObjectPrx):

        def getDevicesList(self, context=None):
            return _M_SmartHome.ManageSystem._op_getDevicesList.invoke(self, ((), context))

        def getDevicesListAsync(self, context=None):
            return _M_SmartHome.ManageSystem._op_getDevicesList.invokeAsync(self, ((), context))

        def begin_getDevicesList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ManageSystem._op_getDevicesList.begin(self, ((), _response, _ex, _sent, context))

        def end_getDevicesList(self, _r):
            return _M_SmartHome.ManageSystem._op_getDevicesList.end(self, _r)

        def addKettle(self, kettleType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addKettle.invoke(self, ((kettleType, description), context))

        def addKettleAsync(self, kettleType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addKettle.invokeAsync(self, ((kettleType, description), context))

        def begin_addKettle(self, kettleType, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ManageSystem._op_addKettle.begin(self, ((kettleType, description), _response, _ex, _sent, context))

        def end_addKettle(self, _r):
            return _M_SmartHome.ManageSystem._op_addKettle.end(self, _r)

        def addBulbulator(self, description, context=None):
            return _M_SmartHome.ManageSystem._op_addBulbulator.invoke(self, ((description, ), context))

        def addBulbulatorAsync(self, description, context=None):
            return _M_SmartHome.ManageSystem._op_addBulbulator.invokeAsync(self, ((description, ), context))

        def begin_addBulbulator(self, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ManageSystem._op_addBulbulator.begin(self, ((description, ), _response, _ex, _sent, context))

        def end_addBulbulator(self, _r):
            return _M_SmartHome.ManageSystem._op_addBulbulator.end(self, _r)

        def addStove(self, fuelType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addStove.invoke(self, ((fuelType, description), context))

        def addStoveAsync(self, fuelType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addStove.invokeAsync(self, ((fuelType, description), context))

        def begin_addStove(self, fuelType, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ManageSystem._op_addStove.begin(self, ((fuelType, description), _response, _ex, _sent, context))

        def end_addStove(self, _r):
            return _M_SmartHome.ManageSystem._op_addStove.end(self, _r)

        def addCooker(self, cookerType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addCooker.invoke(self, ((cookerType, description), context))

        def addCookerAsync(self, cookerType, description, context=None):
            return _M_SmartHome.ManageSystem._op_addCooker.invokeAsync(self, ((cookerType, description), context))

        def begin_addCooker(self, cookerType, description, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.ManageSystem._op_addCooker.begin(self, ((cookerType, description), _response, _ex, _sent, context))

        def end_addCooker(self, _r):
            return _M_SmartHome.ManageSystem._op_addCooker.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.ManageSystemPrx.ice_checkedCast(proxy, '::SmartHome::ManageSystem', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.ManageSystemPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ManageSystem'
    _M_SmartHome._t_ManageSystemPrx = IcePy.defineProxy('::SmartHome::ManageSystem', ManageSystemPrx)

    _M_SmartHome.ManageSystemPrx = ManageSystemPrx
    del ManageSystemPrx

    _M_SmartHome.ManageSystem = Ice.createTempClass()
    class ManageSystem(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::ManageSystem')

        def ice_id(self, current=None):
            return '::SmartHome::ManageSystem'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::ManageSystem'

        def getDevicesList(self, current=None):
            raise NotImplementedError("servant method 'getDevicesList' not implemented")

        def addKettle(self, kettleType, description, current=None):
            raise NotImplementedError("servant method 'addKettle' not implemented")

        def addBulbulator(self, description, current=None):
            raise NotImplementedError("servant method 'addBulbulator' not implemented")

        def addStove(self, fuelType, description, current=None):
            raise NotImplementedError("servant method 'addStove' not implemented")

        def addCooker(self, cookerType, description, current=None):
            raise NotImplementedError("servant method 'addCooker' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_ManageSystemDisp)

        __repr__ = __str__

    _M_SmartHome._t_ManageSystemDisp = IcePy.defineClass('::SmartHome::ManageSystem', ManageSystem, (), None, ())
    ManageSystem._ice_type = _M_SmartHome._t_ManageSystemDisp

    ManageSystem._op_getDevicesList = IcePy.Operation('getDevicesList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_Devices, False, 0), ())
    ManageSystem._op_addKettle = IcePy.Operation('addKettle', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_KettleTypes, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    ManageSystem._op_addBulbulator = IcePy.Operation('addBulbulator', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0),), (), None, ())
    ManageSystem._op_addStove = IcePy.Operation('addStove', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_StoveFuel, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())
    ManageSystem._op_addCooker = IcePy.Operation('addCooker', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_CookerTypes, False, 0), ((), IcePy._t_string, False, 0)), (), None, ())

    _M_SmartHome.ManageSystem = ManageSystem
    del ManageSystem

_M_SmartHome._t_SmartDevice = IcePy.defineValue('::SmartHome::SmartDevice', Ice.Value, -1, (), False, True, None, ())

if 'SmartDevicePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.SmartDevicePrx = Ice.createTempClass()
    class SmartDevicePrx(Ice.ObjectPrx):

        def getManual(self, context=None):
            return _M_SmartHome.SmartDevice._op_getManual.invoke(self, ((), context))

        def getManualAsync(self, context=None):
            return _M_SmartHome.SmartDevice._op_getManual.invokeAsync(self, ((), context))

        def begin_getManual(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDevice._op_getManual.begin(self, ((), _response, _ex, _sent, context))

        def end_getManual(self, _r):
            return _M_SmartHome.SmartDevice._op_getManual.end(self, _r)

        def getDescription(self, context=None):
            return _M_SmartHome.SmartDevice._op_getDescription.invoke(self, ((), context))

        def getDescriptionAsync(self, context=None):
            return _M_SmartHome.SmartDevice._op_getDescription.invokeAsync(self, ((), context))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDevice._op_getDescription.begin(self, ((), _response, _ex, _sent, context))

        def end_getDescription(self, _r):
            return _M_SmartHome.SmartDevice._op_getDescription.end(self, _r)

        def getType(self, context=None):
            return _M_SmartHome.SmartDevice._op_getType.invoke(self, ((), context))

        def getTypeAsync(self, context=None):
            return _M_SmartHome.SmartDevice._op_getType.invokeAsync(self, ((), context))

        def begin_getType(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.SmartDevice._op_getType.begin(self, ((), _response, _ex, _sent, context))

        def end_getType(self, _r):
            return _M_SmartHome.SmartDevice._op_getType.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.SmartDevicePrx.ice_checkedCast(proxy, '::SmartHome::SmartDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.SmartDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartDevice'
    _M_SmartHome._t_SmartDevicePrx = IcePy.defineProxy('::SmartHome::SmartDevice', SmartDevicePrx)

    _M_SmartHome.SmartDevicePrx = SmartDevicePrx
    del SmartDevicePrx

    _M_SmartHome.SmartDevice = Ice.createTempClass()
    class SmartDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::SmartDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::SmartDevice'

        def getManual(self, current=None):
            raise NotImplementedError("servant method 'getManual' not implemented")

        def getDescription(self, current=None):
            raise NotImplementedError("servant method 'getDescription' not implemented")

        def getType(self, current=None):
            raise NotImplementedError("servant method 'getType' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_SmartDeviceDisp)

        __repr__ = __str__

    _M_SmartHome._t_SmartDeviceDisp = IcePy.defineClass('::SmartHome::SmartDevice', SmartDevice, (), None, ())
    SmartDevice._ice_type = _M_SmartHome._t_SmartDeviceDisp

    SmartDevice._op_getManual = IcePy.Operation('getManual', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    SmartDevice._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    SmartDevice._op_getType = IcePy.Operation('getType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_DevicesTypes, False, 0), ())

    _M_SmartHome.SmartDevice = SmartDevice
    del SmartDevice

_M_SmartHome._t_Bulbulator = IcePy.defineValue('::SmartHome::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(_M_SmartHome.SmartDevicePrx):

        def bulbul(self, context=None):
            return _M_SmartHome.Bulbulator._op_bulbul.invoke(self, ((), context))

        def bulbulAsync(self, context=None):
            return _M_SmartHome.Bulbulator._op_bulbul.invokeAsync(self, ((), context))

        def begin_bulbul(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Bulbulator._op_bulbul.begin(self, ((), _response, _ex, _sent, context))

        def end_bulbul(self, _r):
            return _M_SmartHome.Bulbulator._op_bulbul.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.BulbulatorPrx.ice_checkedCast(proxy, '::SmartHome::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulbulator'
    _M_SmartHome._t_BulbulatorPrx = IcePy.defineProxy('::SmartHome::Bulbulator', BulbulatorPrx)

    _M_SmartHome.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_SmartHome.Bulbulator = Ice.createTempClass()
    class Bulbulator(_M_SmartHome.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Bulbulator', '::SmartHome::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Bulbulator'

        def bulbul(self, current=None):
            raise NotImplementedError("servant method 'bulbul' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_BulbulatorDisp)

        __repr__ = __str__

    _M_SmartHome._t_BulbulatorDisp = IcePy.defineClass('::SmartHome::Bulbulator', Bulbulator, (), None, (_M_SmartHome._t_SmartDeviceDisp,))
    Bulbulator._ice_type = _M_SmartHome._t_BulbulatorDisp

    Bulbulator._op_bulbul = IcePy.Operation('bulbul', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHome.Bulbulator = Bulbulator
    del Bulbulator

_M_SmartHome._t_Kettle = IcePy.defineValue('::SmartHome::Kettle', Ice.Value, -1, (), False, True, None, ())

if 'KettlePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.KettlePrx = Ice.createTempClass()
    class KettlePrx(_M_SmartHome.SmartDevicePrx):

        def getInfo(self, context=None):
            return _M_SmartHome.Kettle._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.Kettle._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Kettle._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.Kettle._op_getInfo.end(self, _r)

        def putWater(self, water, context=None):
            return _M_SmartHome.Kettle._op_putWater.invoke(self, ((water, ), context))

        def putWaterAsync(self, water, context=None):
            return _M_SmartHome.Kettle._op_putWater.invokeAsync(self, ((water, ), context))

        def begin_putWater(self, water, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Kettle._op_putWater.begin(self, ((water, ), _response, _ex, _sent, context))

        def end_putWater(self, _r):
            return _M_SmartHome.Kettle._op_putWater.end(self, _r)

        def boilWater(self, context=None):
            return _M_SmartHome.Kettle._op_boilWater.invoke(self, ((), context))

        def boilWaterAsync(self, context=None):
            return _M_SmartHome.Kettle._op_boilWater.invokeAsync(self, ((), context))

        def begin_boilWater(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Kettle._op_boilWater.begin(self, ((), _response, _ex, _sent, context))

        def end_boilWater(self, _r):
            return _M_SmartHome.Kettle._op_boilWater.end(self, _r)

        def getWater(self, volume, context=None):
            return _M_SmartHome.Kettle._op_getWater.invoke(self, ((volume, ), context))

        def getWaterAsync(self, volume, context=None):
            return _M_SmartHome.Kettle._op_getWater.invokeAsync(self, ((volume, ), context))

        def begin_getWater(self, volume, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Kettle._op_getWater.begin(self, ((volume, ), _response, _ex, _sent, context))

        def end_getWater(self, _r):
            return _M_SmartHome.Kettle._op_getWater.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.KettlePrx.ice_checkedCast(proxy, '::SmartHome::Kettle', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.KettlePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Kettle'
    _M_SmartHome._t_KettlePrx = IcePy.defineProxy('::SmartHome::Kettle', KettlePrx)

    _M_SmartHome.KettlePrx = KettlePrx
    del KettlePrx

    _M_SmartHome.Kettle = Ice.createTempClass()
    class Kettle(_M_SmartHome.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Kettle', '::SmartHome::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::Kettle'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Kettle'

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def putWater(self, water, current=None):
            raise NotImplementedError("servant method 'putWater' not implemented")

        def boilWater(self, current=None):
            raise NotImplementedError("servant method 'boilWater' not implemented")

        def getWater(self, volume, current=None):
            raise NotImplementedError("servant method 'getWater' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_KettleDisp)

        __repr__ = __str__

    _M_SmartHome._t_KettleDisp = IcePy.defineClass('::SmartHome::Kettle', Kettle, (), None, (_M_SmartHome._t_SmartDeviceDisp,))
    Kettle._ice_type = _M_SmartHome._t_KettleDisp

    Kettle._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_KettleInfo, False, 0), ())
    Kettle._op_putWater = IcePy.Operation('putWater', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_Water, False, 0),), (), None, (_M_SmartHome._t_KettleOverflow,))
    Kettle._op_boilWater = IcePy.Operation('boilWater', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_NotEnoughtWater,))
    Kettle._op_getWater = IcePy.Operation('getWater', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_float, False, 0),), (), ((), _M_SmartHome._t_Water, False, 0), (_M_SmartHome._t_NotEnoughtWater,))

    _M_SmartHome.Kettle = Kettle
    del Kettle

_M_SmartHome._t_Stove = IcePy.defineValue('::SmartHome::Stove', Ice.Value, -1, (), False, True, None, ())

if 'StovePrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.StovePrx = Ice.createTempClass()
    class StovePrx(_M_SmartHome.SmartDevicePrx):

        def getInfo(self, context=None):
            return _M_SmartHome.Stove._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.Stove._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Stove._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.Stove._op_getInfo.end(self, _r)

        def addFuel(self, portion, context=None):
            return _M_SmartHome.Stove._op_addFuel.invoke(self, ((portion, ), context))

        def addFuelAsync(self, portion, context=None):
            return _M_SmartHome.Stove._op_addFuel.invokeAsync(self, ((portion, ), context))

        def begin_addFuel(self, portion, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Stove._op_addFuel.begin(self, ((portion, ), _response, _ex, _sent, context))

        def end_addFuel(self, _r):
            return _M_SmartHome.Stove._op_addFuel.end(self, _r)

        def fire(self, context=None):
            return _M_SmartHome.Stove._op_fire.invoke(self, ((), context))

        def fireAsync(self, context=None):
            return _M_SmartHome.Stove._op_fire.invokeAsync(self, ((), context))

        def begin_fire(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Stove._op_fire.begin(self, ((), _response, _ex, _sent, context))

        def end_fire(self, _r):
            return _M_SmartHome.Stove._op_fire.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.StovePrx.ice_checkedCast(proxy, '::SmartHome::Stove', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.StovePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Stove'
    _M_SmartHome._t_StovePrx = IcePy.defineProxy('::SmartHome::Stove', StovePrx)

    _M_SmartHome.StovePrx = StovePrx
    del StovePrx

    _M_SmartHome.Stove = Ice.createTempClass()
    class Stove(_M_SmartHome.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::SmartDevice', '::SmartHome::Stove')

        def ice_id(self, current=None):
            return '::SmartHome::Stove'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Stove'

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def addFuel(self, portion, current=None):
            raise NotImplementedError("servant method 'addFuel' not implemented")

        def fire(self, current=None):
            raise NotImplementedError("servant method 'fire' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_StoveDisp)

        __repr__ = __str__

    _M_SmartHome._t_StoveDisp = IcePy.defineClass('::SmartHome::Stove', Stove, (), None, (_M_SmartHome._t_SmartDeviceDisp,))
    Stove._ice_type = _M_SmartHome._t_StoveDisp

    Stove._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_StoveInfo, False, 0), ())
    Stove._op_addFuel = IcePy.Operation('addFuel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_SmartHome._t_StoveFuelPortion, False, 0),), (), None, (_M_SmartHome._t_InvalidFuelType, _M_SmartHome._t_InvalidPortionSize))
    Stove._op_fire = IcePy.Operation('fire', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHome.Stove = Stove
    del Stove

_M_SmartHome._t_Cooker = IcePy.defineValue('::SmartHome::Cooker', Ice.Value, -1, (), False, True, None, ())

if 'CookerPrx' not in _M_SmartHome.__dict__:
    _M_SmartHome.CookerPrx = Ice.createTempClass()
    class CookerPrx(_M_SmartHome.SmartDevicePrx):

        def getInfo(self, context=None):
            return _M_SmartHome.Cooker._op_getInfo.invoke(self, ((), context))

        def getInfoAsync(self, context=None):
            return _M_SmartHome.Cooker._op_getInfo.invokeAsync(self, ((), context))

        def begin_getInfo(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Cooker._op_getInfo.begin(self, ((), _response, _ex, _sent, context))

        def end_getInfo(self, _r):
            return _M_SmartHome.Cooker._op_getInfo.end(self, _r)

        def putOnBurner(self, burnerNumber, context=None):
            return _M_SmartHome.Cooker._op_putOnBurner.invoke(self, ((burnerNumber, ), context))

        def putOnBurnerAsync(self, burnerNumber, context=None):
            return _M_SmartHome.Cooker._op_putOnBurner.invokeAsync(self, ((burnerNumber, ), context))

        def begin_putOnBurner(self, burnerNumber, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Cooker._op_putOnBurner.begin(self, ((burnerNumber, ), _response, _ex, _sent, context))

        def end_putOnBurner(self, _r):
            return _M_SmartHome.Cooker._op_putOnBurner.end(self, _r)

        def getFromBurner(self, burnerNumber, context=None):
            return _M_SmartHome.Cooker._op_getFromBurner.invoke(self, ((burnerNumber, ), context))

        def getFromBurnerAsync(self, burnerNumber, context=None):
            return _M_SmartHome.Cooker._op_getFromBurner.invokeAsync(self, ((burnerNumber, ), context))

        def begin_getFromBurner(self, burnerNumber, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Cooker._op_getFromBurner.begin(self, ((burnerNumber, ), _response, _ex, _sent, context))

        def end_getFromBurner(self, _r):
            return _M_SmartHome.Cooker._op_getFromBurner.end(self, _r)

        def putInOven(self, context=None):
            return _M_SmartHome.Cooker._op_putInOven.invoke(self, ((), context))

        def putInOvenAsync(self, context=None):
            return _M_SmartHome.Cooker._op_putInOven.invokeAsync(self, ((), context))

        def begin_putInOven(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Cooker._op_putInOven.begin(self, ((), _response, _ex, _sent, context))

        def end_putInOven(self, _r):
            return _M_SmartHome.Cooker._op_putInOven.end(self, _r)

        def getFromOven(self, context=None):
            return _M_SmartHome.Cooker._op_getFromOven.invoke(self, ((), context))

        def getFromOvenAsync(self, context=None):
            return _M_SmartHome.Cooker._op_getFromOven.invokeAsync(self, ((), context))

        def begin_getFromOven(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHome.Cooker._op_getFromOven.begin(self, ((), _response, _ex, _sent, context))

        def end_getFromOven(self, _r):
            return _M_SmartHome.Cooker._op_getFromOven.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHome.CookerPrx.ice_checkedCast(proxy, '::SmartHome::Cooker', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHome.CookerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Cooker'
    _M_SmartHome._t_CookerPrx = IcePy.defineProxy('::SmartHome::Cooker', CookerPrx)

    _M_SmartHome.CookerPrx = CookerPrx
    del CookerPrx

    _M_SmartHome.Cooker = Ice.createTempClass()
    class Cooker(_M_SmartHome.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHome::Cooker', '::SmartHome::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHome::Cooker'

        @staticmethod
        def ice_staticId():
            return '::SmartHome::Cooker'

        def getInfo(self, current=None):
            raise NotImplementedError("servant method 'getInfo' not implemented")

        def putOnBurner(self, burnerNumber, current=None):
            raise NotImplementedError("servant method 'putOnBurner' not implemented")

        def getFromBurner(self, burnerNumber, current=None):
            raise NotImplementedError("servant method 'getFromBurner' not implemented")

        def putInOven(self, current=None):
            raise NotImplementedError("servant method 'putInOven' not implemented")

        def getFromOven(self, current=None):
            raise NotImplementedError("servant method 'getFromOven' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHome._t_CookerDisp)

        __repr__ = __str__

    _M_SmartHome._t_CookerDisp = IcePy.defineClass('::SmartHome::Cooker', Cooker, (), None, (_M_SmartHome._t_SmartDeviceDisp,))
    Cooker._ice_type = _M_SmartHome._t_CookerDisp

    Cooker._op_getInfo = IcePy.Operation('getInfo', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_SmartHome._t_CookerInfo, False, 0), ())
    Cooker._op_putOnBurner = IcePy.Operation('putOnBurner', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, (_M_SmartHome._t_InvalidBurnerNumber, _M_SmartHome._t_BurnerOccupied))
    Cooker._op_getFromBurner = IcePy.Operation('getFromBurner', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    Cooker._op_putInOven = IcePy.Operation('putInOven', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_CookerDontHaveOven, _M_SmartHome._t_OvenOccupied))
    Cooker._op_getFromOven = IcePy.Operation('getFromOven', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_SmartHome._t_CookerDontHaveOven,))

    _M_SmartHome.Cooker = Cooker
    del Cooker

# End of module SmartHome
